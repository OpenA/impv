#!/usr/bin/env python3

import sys
import os
import time
import json
import socket
import subprocess

# constants
_MPV_ = (os.getenv('MPV') or 'mpv')
_PORT = '/tmp/impv-socket'

# variables
sock  = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
opts  = [_MPV_]
files = []

# flags
APPEND_TO_LIST = False
SHOW_BLANK_UI  = False

# parsing arguments
for arg in (sys.argv[1:]):
    if arg[:2] == '--':
        if arg == '--blank':
            SHOW_BLANK_UI = True
        elif arg == '--add-to-playlist':
            SHOW_BLANK_UI  = True
            APPEND_TO_LIST = True
        else:
            opts.append(arg)
    else: # make them absolute
        files.append(arg)

def openMPV():
    if SHOW_BLANK_UI:
        opts.extend(['--player-operation-mode=pseudo-gui', '--force-window'])

    opts.extend(['--input-ipc-server='+_PORT, '--autofit-smaller=640x480', '--autofit-larger=100%x100%'])
    opts.extend(files)

    subprocess.check_call(opts)

try:
    sock.connect(_PORT)
    files_string = '", "'.join(files)

    if APPEND_TO_LIST:
        sock.sendall(b'{ "command": ["get_property", "playback-time"] }\n')
        action = 'append'

        if json.loads(sock.recv(1024))['error'] != 'success':
            action = 'replace'

        sock.sendall(b'{ "command": ["loadfile", "'+files_string+'", "'+action+'"] }\n')
    else:
        sock.sendall(b'{ "command": ["get_property", "fullscreen"] }\n')
        ALWAYS_ON_TOP = json.loads(sock.recv(1024))['data']

        if not ALWAYS_ON_TOP:
            sock.sendall(b'{ "command": ["get_property", "ontop"] }\n')
            ALWAYS_ON_TOP = json.loads(sock.recv(1024))['data']

        if ALWAYS_ON_TOP:
            sock.sendall(b'{ "command": ["loadfile", "'+files_string+'", "replace"] }\n')
            sock.sendall(b'{ "command": ["set_property", "pause", false] }\n')
        else:
            sock.sendall(b'{ "command": ["quit"] }\n')
            openMPV()

except socket.error as e:
    openMPV()
finally:
    sock.shutdown(socket.SHUT_WR)
    time.sleep(1)
    sock.close()
